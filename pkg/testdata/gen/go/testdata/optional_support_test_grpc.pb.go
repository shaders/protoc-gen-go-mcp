// Copyright 2025 Redpanda Data, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: testdata/optional_support_test.proto

package testdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OptionalSupportTestService_TestOptionalFields_FullMethodName = "/testdata.OptionalSupportTestService/TestOptionalFields"
)

// OptionalSupportTestServiceClient is the client API for OptionalSupportTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OptionalSupportTestService tests optional keyword support functionality
type OptionalSupportTestServiceClient interface {
	// Test method with various field types to test optional keyword support
	TestOptionalFields(ctx context.Context, in *TestOptionalFieldsRequest, opts ...grpc.CallOption) (*TestOptionalFieldsResponse, error)
}

type optionalSupportTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptionalSupportTestServiceClient(cc grpc.ClientConnInterface) OptionalSupportTestServiceClient {
	return &optionalSupportTestServiceClient{cc}
}

func (c *optionalSupportTestServiceClient) TestOptionalFields(ctx context.Context, in *TestOptionalFieldsRequest, opts ...grpc.CallOption) (*TestOptionalFieldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestOptionalFieldsResponse)
	err := c.cc.Invoke(ctx, OptionalSupportTestService_TestOptionalFields_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptionalSupportTestServiceServer is the server API for OptionalSupportTestService service.
// All implementations must embed UnimplementedOptionalSupportTestServiceServer
// for forward compatibility.
//
// OptionalSupportTestService tests optional keyword support functionality
type OptionalSupportTestServiceServer interface {
	// Test method with various field types to test optional keyword support
	TestOptionalFields(context.Context, *TestOptionalFieldsRequest) (*TestOptionalFieldsResponse, error)
	mustEmbedUnimplementedOptionalSupportTestServiceServer()
}

// UnimplementedOptionalSupportTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOptionalSupportTestServiceServer struct{}

func (UnimplementedOptionalSupportTestServiceServer) TestOptionalFields(context.Context, *TestOptionalFieldsRequest) (*TestOptionalFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestOptionalFields not implemented")
}
func (UnimplementedOptionalSupportTestServiceServer) mustEmbedUnimplementedOptionalSupportTestServiceServer() {
}
func (UnimplementedOptionalSupportTestServiceServer) testEmbeddedByValue() {}

// UnsafeOptionalSupportTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptionalSupportTestServiceServer will
// result in compilation errors.
type UnsafeOptionalSupportTestServiceServer interface {
	mustEmbedUnimplementedOptionalSupportTestServiceServer()
}

func RegisterOptionalSupportTestServiceServer(s grpc.ServiceRegistrar, srv OptionalSupportTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedOptionalSupportTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OptionalSupportTestService_ServiceDesc, srv)
}

func _OptionalSupportTestService_TestOptionalFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestOptionalFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionalSupportTestServiceServer).TestOptionalFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionalSupportTestService_TestOptionalFields_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionalSupportTestServiceServer).TestOptionalFields(ctx, req.(*TestOptionalFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OptionalSupportTestService_ServiceDesc is the grpc.ServiceDesc for OptionalSupportTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptionalSupportTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.OptionalSupportTestService",
	HandlerType: (*OptionalSupportTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestOptionalFields",
			Handler:    _OptionalSupportTestService_TestOptionalFields_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata/optional_support_test.proto",
}
