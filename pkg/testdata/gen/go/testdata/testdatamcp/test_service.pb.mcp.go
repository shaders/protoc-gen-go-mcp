// Code generated by protoc-gen-mcp-go. DO NOT EDIT.
// source: testdata/test_service.proto

package testdatamcp

import (
	testdata "github.com/shaders/protoc-gen-go-mcp/pkg/testdata/gen/go/testdata"
)

import (
	"context"
	"strings"
	"github.com/mark3labs/mcp-go/mcp"
	mcpserver "github.com/mark3labs/mcp-go/server"
	"encoding/json"
	"google.golang.org/protobuf/encoding/protojson"
	grpc "google.golang.org/grpc"
	"github.com/shaders/protoc-gen-go-mcp/pkg/runtime"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// Tool represents an MCP tool definition with essential fields
type Tool struct {
	Name        string
	Description string
	JSONSchema  string
}

var (
	TestService_CreateItemTool            = Tool{Name: "testdata_TestService_CreateItem", Description: "CreateItem creates a new item\n", JSONSchema: "{\"additionalProperties\":false,\"properties\":{\"description\":{\"description\":\"Optional field\",\"type\":\"string\"},\"item_typeOneOfType\":{\"oneOf\":[{\"additionalProperties\":false,\"properties\":{\"price\":{\"description\":\"Product price in dollars\",\"type\":\"number\"},\"quantity\":{\"description\":\"Available quantity\",\"type\":\"integer\"},\"type\":{\"const\":\"product\",\"type\":\"string\"}},\"required\":[\"type\"],\"title\":\"product\",\"type\":\"object\"},{\"additionalProperties\":false,\"properties\":{\"duration\":{\"description\":\"Service duration (e.g. \\\"1h\\\", \\\"30m\\\")\",\"type\":\"string\"},\"recurring\":{\"description\":\"Whether this is a recurring service\",\"type\":\"boolean\"},\"type\":{\"const\":\"service\",\"type\":\"string\"}},\"required\":[\"type\"],\"title\":\"service\",\"type\":\"object\"}]},\"labels\":{\"additionalProperties\":{\"type\":\"string\"},\"description\":\"Map field\",\"propertyNames\":{\"type\":\"string\"},\"type\":\"object\"},\"name\":{\"description\":\"Required field\",\"type\":\"string\"},\"tags\":{\"description\":\"Repeated field\",\"items\":{\"type\":\"string\"},\"type\":\"array\"},\"thumbnail\":{\"contentEncoding\":\"base64\",\"description\":\"Bytes field\",\"format\":\"byte\",\"type\":\"string\"}},\"required\":[\"name\",\"item_typeOneOfType\"],\"type\":\"object\"}"}
	TestService_GetItemTool               = Tool{Name: "testdata_TestService_GetItem", Description: "GetItem retrieves an item by ID\n", JSONSchema: "{\"additionalProperties\":false,\"properties\":{\"id\":{\"type\":\"string\"}},\"required\":[],\"type\":\"object\"}"}
	TestService_ProcessWellKnownTypesTool = Tool{Name: "testdata_TestService_ProcessWellKnownTypes", Description: "Test well-known types handling\n", JSONSchema: "{\"additionalProperties\":false,\"properties\":{\"config\":{\"description\":\"represents a google.protobuf.Value, a dynamic JSON value (string, number, boolean, array, object).\"},\"metadata\":{\"additionalProperties\":true,\"description\":\"Well-known types that need special handling\",\"type\":\"object\"},\"payload\":{\"properties\":{\"@type\":{\"type\":\"string\"},\"value\":{}},\"required\":[\"@type\"],\"type\":[\"object\",\"null\"]},\"timestamp\":{\"format\":\"date-time\",\"type\":[\"string\",\"null\"]}},\"required\":[],\"type\":\"object\"}"}
)

// TestServiceClient is compatible with the grpc-go client interface.
type TestServiceClient interface {
	CreateItem(ctx context.Context, req *testdata.CreateItemRequest, opts ...grpc.CallOption) (*testdata.CreateItemResponse, error)
	GetItem(ctx context.Context, req *testdata.GetItemRequest, opts ...grpc.CallOption) (*testdata.GetItemResponse, error)
	ProcessWellKnownTypes(ctx context.Context, req *testdata.ProcessWellKnownTypesRequest, opts ...grpc.CallOption) (*testdata.ProcessWellKnownTypesResponse, error)
}

// TODO: BUG: https://github.com/anthropics/claude-code/issues/3084
// TestServiceNormalizeTopLevelJSONStringsForOneofs scans m's top level and, for keys that are members
// of any (or selected) oneof(s) in the given proto message type, it will parse string values
// that look like JSON and replace them with the parsed value.
// If oneofNames is empty, all oneofs are considered. Otherwise only the named oneofs are used.
func TestServiceNormalizeTopLevelJSONStringsForOneofs(
	m map[string]interface{},
	msg proto.Message,
	oneofNames ...string,
) (changed bool) {
	if m == nil || msg == nil {
		return false
	}

	md := msg.ProtoReflect().Descriptor()
	// Build a set of target oneof descriptors
	var targetOneofs map[protoreflect.OneofDescriptor]struct{}
	if len(oneofNames) > 0 {
		targetOneofs = map[protoreflect.OneofDescriptor]struct{}{}
	outer:
		for i := 0; i < md.Oneofs().Len(); i++ {
			od := md.Oneofs().Get(i)
			for _, name := range oneofNames {
				if string(od.Name()) == name {
					targetOneofs[od] = struct{}{}
					continue outer
				}
			}
		}
	}

	// Collect JSON names of fields that belong to the target oneof(s)
	jsonNames := map[string]struct{}{}
	for i := 0; i < md.Fields().Len(); i++ {
		fd := md.Fields().Get(i)
		if fd.ContainingOneof() == nil {
			continue
		}
		if targetOneofs != nil {
			if _, ok := targetOneofs[fd.ContainingOneof()]; !ok {
				continue
			}
		}
		// fd.JSONName() is the canonical JSON field name ("cat", "dog", ...)
		jsonNames[fd.JSONName()] = struct{}{}
		// Also consider the proto field name in case your map uses snake_case
		jsonNames[string(fd.Name())] = struct{}{}
	}

	// Rewrite top-level stringified JSON for those keys
	for k, v := range m {
		if _, ok := jsonNames[k]; !ok {
			continue
		}
		s, ok := v.(string)
		if !ok {
			continue
		}
		trim := strings.TrimSpace(s)
		if trim == "" || !(strings.HasPrefix(trim, "{") || strings.HasPrefix(trim, "[")) {
			continue
		}
		var parsed any
		if err := json.Unmarshal([]byte(trim), &parsed); err != nil {
			continue // ignore if it's not valid JSON
		}
		m[k] = parsed
		changed = true
	}
	return changed
}

// TestServiceTransformOneOfFields transforms discriminated union fields back to protobuf oneOf format
func TestServiceTransformOneOfFields(m map[string]interface{}) {
	TestServiceTransformOneOfFieldsRecursive(m)
}

// TestServiceTransformOneOfFieldsRecursive recursively transforms oneOf fields in nested objects
func TestServiceTransformOneOfFieldsRecursive(obj interface{}) {
	switch v := obj.(type) {
	case map[string]interface{}:
		// Transform oneOf fields in this object
		for key, value := range v {
			// Check if this looks like a oneOf discriminated union (must have OneOfType postfix)
			if strings.HasSuffix(key, "OneOfType") {
				if unionObj, ok := value.(map[string]interface{}); ok {
					if typeField, hasType := unionObj["type"]; hasType {
						if typeStr, ok := typeField.(string); ok {
							// Create a new object without the type field
							variantObj := make(map[string]interface{})
							for k, val := range unionObj {
								if k != "type" {
									variantObj[k] = val
								}
							}

							// Replace the union object with the variant object
							v[typeStr] = variantObj
							delete(v, key)
						}
					}
				}
			}
		}

		// Recursively process all values
		for _, value := range v {
			TestServiceTransformOneOfFieldsRecursive(value)
		}
	case []interface{}:
		// Process array elements
		for _, item := range v {
			TestServiceTransformOneOfFieldsRecursive(item)
		}
	}
}

// ForwardToTestServiceClient registers a gRPC client, to forward MCP calls to it.
func ForwardToTestServiceClient(s *mcpserver.MCPServer, client TestServiceClient, opts ...runtime.Option) {
	config := runtime.NewConfig()
	for _, opt := range opts {
		opt(config)
	}
	CreateItemToolDef := TestService_CreateItemTool

	// Convert simple Tool to mcp.Tool
	CreateItemTool := mcp.Tool{
		Name:           CreateItemToolDef.Name,
		Description:    CreateItemToolDef.Description,
		RawInputSchema: json.RawMessage(CreateItemToolDef.JSONSchema),
	}

	// Add extra properties to schema if configured
	if len(config.ExtraProperties) > 0 {
		CreateItemTool = runtime.AddExtraPropertiesToTool(CreateItemTool, config.ExtraProperties)
	}

	s.AddTool(CreateItemTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var req testdata.CreateItemRequest

		message := request.GetArguments()

		// Transform oneOf discriminated unions back to protobuf format
		TestServiceTransformOneOfFields(message)

		// Limit to the "kind" oneof (optional). If you omit it, all oneofs are considered.
		// TODO: checking that the bug was fixed
		// _ = TestServiceNormalizeTopLevelJSONStringsForOneofs(message, &req, "")

		// Extract extra properties if configured
		for _, prop := range config.ExtraProperties {
			if propVal, ok := message[prop.Name]; ok {
				ctx = context.WithValue(ctx, prop.ContextKey, propVal)
			}
		}

		marshaled, err := json.Marshal(message)
		if err != nil {
			return nil, err
		}

		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := client.CreateItem(ctx, &req)
		if err != nil {
			return runtime.HandleError(err)
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp)
		if err != nil {
			return nil, err
		}
		return mcp.NewToolResultText(string(marshaled)), nil
	})
	GetItemToolDef := TestService_GetItemTool

	// Convert simple Tool to mcp.Tool
	GetItemTool := mcp.Tool{
		Name:           GetItemToolDef.Name,
		Description:    GetItemToolDef.Description,
		RawInputSchema: json.RawMessage(GetItemToolDef.JSONSchema),
	}

	// Add extra properties to schema if configured
	if len(config.ExtraProperties) > 0 {
		GetItemTool = runtime.AddExtraPropertiesToTool(GetItemTool, config.ExtraProperties)
	}

	s.AddTool(GetItemTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var req testdata.GetItemRequest

		message := request.GetArguments()

		// Transform oneOf discriminated unions back to protobuf format
		TestServiceTransformOneOfFields(message)

		// Limit to the "kind" oneof (optional). If you omit it, all oneofs are considered.
		// TODO: checking that the bug was fixed
		// _ = TestServiceNormalizeTopLevelJSONStringsForOneofs(message, &req, "")

		// Extract extra properties if configured
		for _, prop := range config.ExtraProperties {
			if propVal, ok := message[prop.Name]; ok {
				ctx = context.WithValue(ctx, prop.ContextKey, propVal)
			}
		}

		marshaled, err := json.Marshal(message)
		if err != nil {
			return nil, err
		}

		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := client.GetItem(ctx, &req)
		if err != nil {
			return runtime.HandleError(err)
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp)
		if err != nil {
			return nil, err
		}
		return mcp.NewToolResultText(string(marshaled)), nil
	})
	ProcessWellKnownTypesToolDef := TestService_ProcessWellKnownTypesTool

	// Convert simple Tool to mcp.Tool
	ProcessWellKnownTypesTool := mcp.Tool{
		Name:           ProcessWellKnownTypesToolDef.Name,
		Description:    ProcessWellKnownTypesToolDef.Description,
		RawInputSchema: json.RawMessage(ProcessWellKnownTypesToolDef.JSONSchema),
	}

	// Add extra properties to schema if configured
	if len(config.ExtraProperties) > 0 {
		ProcessWellKnownTypesTool = runtime.AddExtraPropertiesToTool(ProcessWellKnownTypesTool, config.ExtraProperties)
	}

	s.AddTool(ProcessWellKnownTypesTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		var req testdata.ProcessWellKnownTypesRequest

		message := request.GetArguments()

		// Transform oneOf discriminated unions back to protobuf format
		TestServiceTransformOneOfFields(message)

		// Limit to the "kind" oneof (optional). If you omit it, all oneofs are considered.
		// TODO: checking that the bug was fixed
		// _ = TestServiceNormalizeTopLevelJSONStringsForOneofs(message, &req, "")

		// Extract extra properties if configured
		for _, prop := range config.ExtraProperties {
			if propVal, ok := message[prop.Name]; ok {
				ctx = context.WithValue(ctx, prop.ContextKey, propVal)
			}
		}

		marshaled, err := json.Marshal(message)
		if err != nil {
			return nil, err
		}

		if err := (protojson.UnmarshalOptions{DiscardUnknown: true}).Unmarshal(marshaled, &req); err != nil {
			return nil, err
		}

		resp, err := client.ProcessWellKnownTypes(ctx, &req)
		if err != nil {
			return runtime.HandleError(err)
		}

		marshaled, err = (protojson.MarshalOptions{UseProtoNames: true, EmitDefaultValues: true}).Marshal(resp)
		if err != nil {
			return nil, err
		}
		return mcp.NewToolResultText(string(marshaled)), nil
	})
}
